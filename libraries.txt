full-force date library.
https://github.com/timrwood/moment/

Markdown parsing:
https://github.com/chjj/marked

GIF stuff
https://github.com/pkrumins/node-gif

Option parsing:
https://npmjs.org/package/commander
https://npmjs.org/package/nopt
https://npmjs.org/package/optimist
https://github.com/harthur/nomnom
# My experience: optimist is the most practical. Trivial to start using it
# in an ad-hoc fashion and then later formalize the arguments more.


Tar reader (fanatically maintained since npm depends on it):
https://github.com/isaacs/node-tar

Reading user input from the terminal:
https://github.com/isaacs/read

Streaming JSON reader:
https://github.com/dominictarr/JSONStream

http://www.catonmat.net/series/node-js-modules-you-should-know-about

Glob matching:
https://github.com/isaacs/minimatch
Filesystem globbing (also a good example of jsdoc-like API documentation in
README.md):
https://github.com/isaacs/node-glob

Parsing jsdoc:
https://github.com/visionmedia/dox

General portability and user friendliness:
https://npmjs.org/package/osenv

.ini parsing:
https://github.com/isaacs/ini

a realistic nontrivial C++ binding:
https://github.com/nikhilm/node-taglib
(the taglib library that it binds looks amazingly professional:
http://taglib.github.io/)
Here is a very simple C++ binding:
https://github.com/creationix/uvrun

Shell quoting:
https://github.com/substack/node-shell-quote

Benchmarking:
https://github.com/bestiejs/benchmark.js

Random sampling and shuffling:
https://github.com/substack/node-deck

Integrating semvers into your application:
https://npmjs.org/package/semver

Format bytes in a human-readable way, or convert human-readable to a
number:
https://github.com/visionmedia/bytes.js
https://npmjs.org/package/bytes

Get a monotonic timestamp:
https://github.com/dominictarr/monotonic-timestamp

Handy to paper over browser/node; uses Buffer when available, falling back
to Uint8Array:
https://github.com/chrisdickinson/bops
Used e.g. by https://github.com/chrisdickinson/inflate

Like express, minus browsers.
http://mcavage.github.io/node-restify/

Pretty full-features library for prompting users for info:
https://github.com/flatiron/prompt

A real "dictionary" for when you need to work around __proto__ and other
nastiness.
https://github.com/domenic/dict

Of course, esprima for all your parsing needs:
https://github.com/ariya/esprima
An alternative:
https://github.com/marijnh/acorn
Both use basically the same AST representation, so they are mostly
interchangeable.

Looks super legit for traversing JSON-like data structures:
https://github.com/dherman/pattern-match

Simple "keybindings" and other stuff for interactive media applications in
a browser:
https://github.com/mikolalysenko/game-shell

Better "bind" and related functionality:
https://github.com/substack/node-ap

General graph stuff:
https://github.com/cpettitt/graphlib

Lightweight replacement for `request`. Works with browserify.
https://npmjs.org/package/hyperquest

Multi-dimensional arrays
https://github.com/mikolalysenko/ndarray
https://github.com/mikolalysenko/cwise
https://github.com/mikolalysenko/ndarray-ops
https://github.com/mikolalysenko/webglew
Check out other stuff by Mikola Lysenko; he has some legit modules.
Especially stuff relevant to game programming (e.g. webgl stuff).
https://github.com/mikolalysenko/gl-now
Looks like a good building-block-based tutorial for webgl:
https://github.com/mikolalysenko/gl-modules

https://github.com/mikolalysenko/bit-twiddle

Sane templating:
https://github.com/substack/hyperglue
https://github.com/substack/hyperspace

YAML parsing
https://github.com/nodeca/js-yaml

Seems good for client-side webapps (used by the gitbook editor):
https://friendco.de/hr.js/
