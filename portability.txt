Small, portable, idioms

This is the standard "data type" pattern:

function DataType(options) {
  // Ctor guard.
  if (!(this instanceof DataType))
    return new DataType(options);

  // If inheriting:
  // (explicitly naming the superclass is common, albeit a slight DRY
  // violation)
  Base.call(this, options);

  // Add some fields.
  this._privateArray = []
  this.name = 'foo';
}

DataType.prototype = Object.create(Base.prototype, {
  constructor: { value: DataType }
});

DataType.prototype.someMethod = function () {
  console.log('something');
}
DataType.prototype._somePrivateMethod = function () {
  console.log('something');
}
